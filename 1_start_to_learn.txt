/*
*作者：沐风
*目的：整理并记录个人学习git的过程，方便以后参考
*本文档大部分引用于：http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000
*/

一、创建版本库
  版本库又名仓库(repository)，可以简单理解成一个目录，这个目录里的所有文件都可以被Git管理起来，每个文件的修改，
删除，Git都可以跟踪，以便任何时刻都可以跟踪历史，或者在将来某个时刻可以“还原”
  
备注：默认读者已经安装了git软件
      git help可以参看帮助 
1、创建一个空目录
  $mkdir git_study
  $cd git_study
  
2、通过git init命令把这个目录变成Git可以管理的仓库：
  $git init
  Initialized empty Git repository in /home/liuzhizhu/mufeng/git_repositories/git_study/.git/
  Git把仓库建好，而且是一个空的仓库（Initialized empty Git repository），可以发现在当前的目录下多了一个.git的目录，
这个目录是Git用来跟踪版本库的，所以千万不要手动修改这个目录里面的文件。如果改乱了，就把Git仓库给破坏了。

3、把文件添加到版本库
/*************************************************************************************
  首先这里再明确一下，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。
版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。
而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，
但到底改了啥，版本控制系统不知道，也没法知道。
  不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的，如果要真正使用版本控制系统，就要以纯文本方式编写文件。

  因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，
所有语言使用同一种编码，既没有冲突，又被所有平台所支持。

  使用Windows的童鞋要特别注意：
  千万不要使用Windows自带的记事本编辑任何文本文件。原因是Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，
他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题，比如，网页第一行可能会显示一个“?”，
明明正确的程序一编译就报语法错误，等等，都是由记事本的弱智行为带来的。建议你下载Notepad++代替记事本，不但功能强大，而且免费！
记得把Notepad++的默认编码设置为UTF-8 without BOM即可：

*************************************************************************************/
3.1 把要添加的文件放到git_study（仓库目录）目录下(子目录也可以)。
3.2 使用git add告诉Git，把文件添加到仓库。
  $git add 1_start_to_learn.txt
  备注：1_start_to_learn.txt是将要添加的仓库的文件
3.3 用git commit告诉Git，把文件提交到仓库
  $git commit -m "create a file"
  git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。
  
4、版本回退
  4.1 git status 命令可以了解仓库当前的状态
  4.2 当用git status 命令直到仓库中有文件被修改的时候，git diff fileName 可以让我们知道某个文件被修改的具体内容。
  4.3 了解文件被修改了哪些内容后，确定没有问题了，就可以提交修改。
       提交修改和提交新文件一样是两步
	   1）、git add file.txt
	   2）、git commit -m "what is the change."
           第一步是用git add把文件添加进去，实际上就是把工作区文件修改添加到暂存区；
		   第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
       3）、用git diff HEAD -- file.txt命令可以查看工作区和版本库里面最新版本的区别：
	         $git diff HEAD -- file.txt
  4.4 把文件改乱了，或者误删了文件，还可以从最近的一个commit恢复，然后继续工作，而不是把几个月的工作成果全部丢失。
      1）、git log 命令显示从最近到最远的提交日志。从中找到我们要退回的commit id（一大串类似3628164...882e1e0的是commit id）
      2）、明确在Git中，用HEAD表示当前版本，也就是最新的提交3628164...882e1e0（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，
	       上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
	  3）、使用git reset命令：
	       $git reset --hard HEAD^
      4）、然后我们用git log 查看现在版本库的状态，注意到之前最新的那个commit id不见了。
	       如果我们记得“未来”的那个版本的commit_id，想回到“未来”的那个版本，可以使用以下命令：
		   $git reset --hard commit_id
		   备注：版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。
	  5）、如果我们不记得commit_id，可以使用git reflog来查看记录你的每一次命令，这样就可以找回那个commit_id:
	       $git reflog
				d03dd9e HEAD@{0}: reset: moving to HEAD^
				e5bed3c HEAD@{1}: reset: moving to e5bed3ca
				d03dd9e HEAD@{2}: reset: moving to HEAD^
				e5bed3c HEAD@{3}: commit: go back test
				d03dd9e HEAD@{4}: commit: how to get back

5、撤销修改				
  5.1 当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file，
      git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令
  5.2 命令git checkout -- file意思是，把file文件在工作区的修改全部撤销，这里有两种情况：
	 1）file自修改以后还没有git add，即修改没有被放到暂存区，现在撤销修改就回到和版本库一样的状态
	 2）file修改以后git add过了，又作了修改，现在撤销修改就回到添加到暂存区的状态。
  
  5.3 当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，
     第一步用命令git reset HEAD file可以把暂存区的修改撤销（unstage），重新放回工作区。
	 第二步用命令git checkout -- file