/*
*作者：沐风
*目的：整理并记录个人学习git的过程，方便以后参考
*本文档大部分引用于：http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000
*/

二、远程仓库
  Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。最早，只有一台机器有一个原始版本库，此后，别的机器可以”克隆“这个原始的版本库，
 而且每一台机器的版本库都是一样的，并没有主次之分。
 
  备注：其实一台电脑上也是可以克隆多个版本库的，只要不在同一个目录下。现实生活中是不会有人这么傻的在一台电脑上搞几个远程库玩，因为一台电脑上搞几个远程库完全没有意义，
 而且硬盘挂了会导致所有库都挂掉，所以我也不告诉你在一台电脑上怎么克隆多个仓库。

本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：
1、创建ssh key
	在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。
	如果没有，打开Shell，创建SSH Key：
	   $ ssh-keygen -t rsa -C "youremail@example.com"
	你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。
	如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，
	id_rsa.pub是公钥，可以放心地告诉任何人。
2、登陆GitHub，打开“Personal settings”，“SSH Keys”页面：
   然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容。点“Add Key”，你就应该看到已经添加的Key
   
   备注：当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。
         最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。

3、添加远程仓库
  3.1 首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：
      在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库。
  3.2 目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。
      现在，我们根据GitHub的提示，在本地的learngit仓库下运行命令：
	    $git remote add origin git@github.com:mufeng134/learngit.git
        $git push -u origin master
      请千万注意，把上面的michaelliao替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，
	  因为你的SSH Key公钥不在我的账户列表中。
	  添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
  3.3 把本地库的所有内容推送到远程库上：
        $git push -u origin master
	  把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
	  由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，
	  还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
	  
	  从现在起，只要本地作了提交，就可以通过命令：
	     $ git push origin master
	  把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！
		/**********************************************************************************
			SSH警告

			当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：

			The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.
			RSA key fingerprint is xx.xx.xx.xx.xx.
			Are you sure you want to continue connecting (yes/no)?
			这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。

			Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：

			Warning: Permanently added 'github.com' (RSA) to the list of known hosts.
			这个警告只会出现一次，后面的操作就不会有任何警告了。

			如果你实在担心有人冒充GitHub服务器，输入yes前可以对照GitHub的RSA Key的指纹信息是否与SSH连接给出的一致。
		**********************************************************************************/

4、从远程库克隆
  远程库已经准备好了，下一步是用命令git clone克隆一个本地库：
    $git clone git@github.com:mufeng134/learngit.git
  如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。
  你也许还注意到，GitHub给出的地址不止一个，还可以用https://github.com/******这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。
  使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。
	



